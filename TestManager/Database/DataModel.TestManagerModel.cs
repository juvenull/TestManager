//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 06.10.2018 17:23:16
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestManager.Database
{

    public partial class TestManagerModel : DbContext
    {

        public TestManagerModel() :
            base()
        {
            OnCreated();
        }

        public TestManagerModel(DbContextOptions<TestManagerModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                if (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null))
                  optionsBuilder.UseSqlServer(@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=TestManager;Integrated Security=True;Persist Security Info=True");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Case> Cases
        {
            get;
            set;
        }

        public virtual DbSet<Plan> Plans
        {
            get;
            set;
        }

        public virtual DbSet<Project> Projects
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.CaseMapping(modelBuilder);
            this.CustomizeCaseMapping(modelBuilder);

            this.PlanMapping(modelBuilder);
            this.CustomizePlanMapping(modelBuilder);

            this.ProjectMapping(modelBuilder);
            this.CustomizeProjectMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }
    
        #region Case Mapping

        private void CaseMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Case>().ToTable(@"Case", @"data");
            modelBuilder.Entity<Case>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Case>().Property<int>(x => x.IdPlan).HasColumnName(@"IdPlan").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Case>().Property<string>(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(500)").IsRequired().ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<Case>().Property<string>(x => x.Description).HasColumnName(@"Description").HasColumnType(@"nvarchar(500)").ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<Case>().Property<System.DateTime>(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Case>().HasKey(@"Id");
        }
	
        partial void CustomizeCaseMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Plan Mapping

        private void PlanMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Plan>().ToTable(@"Plan", @"data");
            modelBuilder.Entity<Plan>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Plan>().Property<int>(x => x.IdProject).HasColumnName(@"IdProject").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Plan>().Property<string>(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(300)").IsRequired().ValueGeneratedNever().HasMaxLength(300);
            modelBuilder.Entity<Plan>().Property<string>(x => x.Description).HasColumnName(@"Description").HasColumnType(@"nvarchar(500)").ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<Plan>().Property<System.DateTime>(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Plan>().HasKey(@"Id");
        }
	
        partial void CustomizePlanMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Project Mapping

        private void ProjectMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Project>().ToTable(@"Project", @"data");
            modelBuilder.Entity<Project>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Project>().Property<string>(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(300)").IsRequired().ValueGeneratedNever().HasMaxLength(300);
            modelBuilder.Entity<Project>().Property<string>(x => x.Description).HasColumnName(@"Description").HasColumnType(@"nvarchar(500)").ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<Project>().Property<string>(x => x.AvatarUrl).HasColumnName(@"AvatarUrl").HasColumnType(@"nvarchar(1000)").ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<Project>().HasKey(@"Id");
        }
	
        partial void CustomizeProjectMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {

        #region Case Navigation properties

            modelBuilder.Entity<Case>().HasOne(x => x.Plan).WithMany(op => op.Cases).IsRequired(true).HasForeignKey(@"IdPlan");

        #endregion

        #region Plan Navigation properties

            modelBuilder.Entity<Plan>().HasMany(x => x.Cases).WithOne(op => op.Plan).IsRequired(true).HasForeignKey(@"IdPlan");
            modelBuilder.Entity<Plan>().HasOne(x => x.Project).WithMany(op => op.Plans).IsRequired(true).HasForeignKey(@"IdProject");

        #endregion

        #region Project Navigation properties

            modelBuilder.Entity<Project>().HasMany(x => x.Plans).WithOne(op => op.Project).IsRequired(true).HasForeignKey(@"IdProject");

        #endregion
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
